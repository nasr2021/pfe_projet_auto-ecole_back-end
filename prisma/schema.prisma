generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model autoecole {
  id                               Int          @id @default(autoincrement())
  nom                              String?      @db.VarChar(255)
  adresse                          String?      @db.VarChar(255)
  ville                            String?      @db.VarChar(100)
  code_postal                      String?      @db.VarChar(10)
  pays                             String?      @db.VarChar(100)
  telephone                        String?      @db.VarChar(20)
  email                            String?      @db.VarChar(255)
  idUser                           Int?
  sms                              Int?
  temp_historique                  DateTime?    @db.Date
  matricule                        String?      @db.VarChar(255)
  status                           String?      @db.VarChar(254)
  nombre_compte                    Int?
  moniteurs                        Int?
  candidats                        Int?
  date_creation                    DateTime?    @default(now()) @db.Timestamp(0)
  total                            Int?
  gerantecole                      gerantecole? @relation(fields: [idUser], references: [idGerant], onDelete: Restrict, onUpdate: Restrict, map: "FK_AUTOECOL_GERER_PAR_GERANTEC")
  user_autoecole_idUserTouser      user?        @relation("autoecole_idUserTouser", fields: [idUser], references: [idUser], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_new_name")
  calendrier                       calendrier[]
  condidat                         condidat[]
  contrat                          contrat[]
  demande                          demande[]
  moniteur                         moniteur[]
  user_autoecoleTouser_idAutoEcole user[]       @relation("autoecoleTouser_idAutoEcole")
  voitures                         voitures[]

  @@index([idUser], map: "fk_user_new_name")
}

model calendrier {
  idEvenement                                          Int            @id @default(autoincrement())
  nom_evenement                                        String         @db.VarChar(255)
  date_debut                                           DateTime       @db.DateTime(0)
  date_fin                                             DateTime       @db.DateTime(0)
  description                                          String?        @db.Text
  idUser                                               Int?
  idAutoEcole                                          Int?
  idMoniteur                                           Int?
  date_creation                                        DateTime?      @db.Date
  idVoiture                                            Int?
  type                                                 String?        @db.VarChar(255)
  autoecole                                            autoecole?     @relation(fields: [idAutoEcole], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "FK_EVENEMEN_ORGANISER_AUTOECOL")
  moniteur                                             moniteur?      @relation(fields: [idMoniteur], references: [idMoniteur], onDelete: NoAction, onUpdate: NoAction, map: "fk_calendrier_moniteur")
  condidat                                             condidat?      @relation(fields: [idUser], references: [idCondidat], onDelete: Restrict, onUpdate: Restrict, map: "FK_EVENEMEN_PARTICIPE_CONDIDAT")
  user                                                 user?          @relation(fields: [idUser], references: [idUser], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_id")
  voitures                                             voitures?      @relation(fields: [idVoiture], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "FK_EVENEMEN_PARTICIPA_VOITURE")
  demande                                              demande[]
  notification                                         notification[]

  @@index([idAutoEcole], map: "fk_calendrier_autoecole")
  @@index([idVoiture], map: "fk_cars_event")
  @@index([idUser], map: "fk_user_id")
  @@index([idMoniteur], map: "fk_calendrier_moniteur")
}

model demande {
  idDemande      Int           @id @default(autoincrement())
  type           String?       @db.VarChar(255)
  idUser         Int?
  date_creation  DateTime?     @default(now()) @db.DateTime(0)
  idForfait      Int?
  statut         String?       @db.VarChar(255)
  idAutoecole    Int?

  idEvenement    Int?
  date_debut     DateTime?
  date_fin       DateTime?
  autoecole      autoecole?    @relation(fields: [idAutoecole], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "FK_DEMANDE_PASSER_AUTOECOL")
  evenement      calendrier?   @relation(fields: [idEvenement], references: [idEvenement], onDelete: Restrict, onUpdate: Restrict, map: "FK_DEMANDE_CONCERNER_EVENEMENT")
  forfait        forfait?      @relation(fields: [idForfait], references: [idForfait], onDelete: Restrict, onUpdate: Restrict, map: "FK_DEMANDE_CONCERNER_FORFAIT")
  user           user?         @relation(fields: [idUser], references: [idUser], onDelete: Restrict, onUpdate: Restrict, map: "FK_DEMANDE_ENVOYER_USER")

  @@index([idForfait], map: "idPack")
  @@index([idUser], map: "idUser")
  @@index([idAutoecole], map: "fk_demande_autoecole")

  @@index([idEvenement], map: "FK_DEMANDE_CONCERNER_EVENEMENT")
}

model forfait {
  idForfait         Int          @id @default(autoincrement())
  nombre_compte     Int?
  nombre_sms        Int?
  historique        Boolean?
  prix              Decimal      @db.Decimal(10, 2)
  date_creation     DateTime?    @default(now()) @db.Timestamp(0)
  idAutoEcole       Int?
  nom_forfait       String?      @db.VarChar(255)
  idGerant          Int?
  gerantecole       gerantecole? @relation(fields: [idGerant], references: [idGerant], onDelete: NoAction, onUpdate: NoAction, map: "fk_forfait_gerant_ecole")
  demande           demande[]

  @@index([idAutoEcole], map: "fk_forfait_autoecole")
  @@index([idGerant], map: "fk_forfait_gerant_ecole")
}

model notification {
  idNotification                                     Int          @id @default(autoincrement())
  lu                                                 Boolean?
  description                                        String?      @db.Text
  date_creation                                       DateTime?      @default(now()) @db.Timestamp(0)
  idEvenement                                        Int?
  idUser                                             Int?
  calendrier                                         calendrier?  @relation(fields: [idEvenement], references: [idEvenement], onDelete: NoAction, onUpdate: NoAction, map: "notification_ibfk_1")
  user                                               user?        @relation(fields: [idUser], references: [idUser], onDelete: NoAction, onUpdate: NoAction, map: "notification_ibfk_2")
  
  @@index([idEvenement], map: "idEvenement")
  @@index([idUser], map: "idUser")
}

model roles {
  idRole   Int    @id @default(autoincrement())
  nom_role String @db.VarChar(255)
  user     user[]
}

model user {
  idUser                                Int            @id @default(autoincrement())
  nom                                   String?        @db.VarChar(255)
  prenom                                String?        @db.VarChar(255)
  email                                 String?        @db.VarChar(255)
  numero_telephone1                     String?        @db.VarChar(15)
  numero_telephone2                     String?        @db.VarChar(15)
  idRole                                Int?
  description                           String?        @db.Text
  adresse                               String?        @db.VarChar(255)
  cin                                   String?        @db.VarChar(20)
  nombre_fois_code                      Int?
  nombre_fois_conduit                   Int?
  password                              String?        @db.VarChar(255)
  username                              String?        @unique @db.VarChar(255)
  hash                                  String?        @db.VarChar(255)
  hashedRt                              String?        @db.VarChar(255)
  idAutoEcole                           Int?
  avatar                                String?        @db.VarChar(255)
  emploi                                String?        @db.VarChar(255)
  genre                                 String?        @db.VarChar(255)
  date_creation                         DateTime?      @default(now()) @db.Timestamp(0)
  otp                                   String?        @db.VarChar(255)
  connecte                              Int?
  firebaseToken                         String?
  autoecole_autoecoleTouser_idAutoEcole autoecole?     @relation("autoecoleTouser_idAutoEcole", fields: [idAutoEcole], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_autoecole")
  roles                                 roles?         @relation(fields: [idRole], references: [idRole], onDelete: Restrict, onUpdate: Restrict, map: "FK_USER_ROLE_ROLES")
  autoecole_autoecole_idUserTouser      autoecole[]    @relation("autoecole_idUserTouser")
  calendrier                            calendrier[]
  condidat                              condidat?
  demande                               demande[]
  moniteur                              moniteur?
  notification                          notification[]
  tarification                          tarification[]
  @@index([idAutoEcole], map: "fk_user_autoecole")
  @@index([idRole], map: "idRole")
}
model condidat {
  idCondidat                             Int          @id
  idAutoecole                            Int

  date_creation                          DateTime?    @default(now()) @db.Timestamp(0)
  nombre_heur_code                       Int?
  nombre_heur_conduit                    Int?
  total_prix_code                        Int?
  total_prix_conduit                     Int?
  autoecole                              autoecole    @relation(fields: [idAutoecole], references: [id], onUpdate: Restrict, map: "FK_CONDIDAT_INSCRIPTI_AUTOECOL")
  user                                   user         @relation(fields: [idCondidat], references: [idUser], onUpdate: Restrict, map: "FK_CONDIDAT_GENERALIS_USER")
 calendrier                             calendrier[]
  contrats                               contrat[] 


  @@index([idAutoecole], map: "idAutoecole")
}


model contrat {
  idContrat     Int          @id @default(autoincrement())
  idAutoEcole   Int
  idPermi       Int
  statut        String       @db.VarChar(254)
  date_creation DateTime     @default(now()) @db.Timestamp(0)
  idCondidat    Int
  autoecole     autoecole    @relation(fields: [idAutoEcole], references: [id], onUpdate: Restrict, map: "FK_CONTRAT_AUTOECOLE")
  condidat      condidat     @relation(fields: [idCondidat], references: [idCondidat], onUpdate: Restrict, map:"FK_contrat_condidat")
  permi         permi        @relation(fields: [idPermi], references: [idPermi], onUpdate: Restrict, map: "FK_CONTRAT_PERMI")
  paiement      paiement[]

  @@index([idCondidat], map: "FK_contrat_condidat")
  @@index([idAutoEcole], map: "FK_CONTRAT_AUTOECOLE")
  @@index([idPermi], map: "FK_CONTRAT_PERMI")
}

model moniteur {
  idMoniteur    Int          @id
  idAutoecole   Int
  date_creation DateTime?    @default(now()) @db.Timestamp(0)
  autoecole     autoecole    @relation(fields: [idAutoecole], references: [id], onUpdate: Restrict, map: "FK_MONITEUR_EMPLOYEME_AUTOECOL")
  user          user         @relation(fields: [idMoniteur], references: [idUser], onUpdate: Restrict, map: "FK_MONITEUR_GENERALIS_USER")
  calendrier    calendrier[]
  @@index([idAutoecole], map: "idAutoecole")
}

model gerantecole {
  idGerant      Int            @id
  date_creation DateTime?      @default(now()) @db.Timestamp(0)
  autoecole     autoecole[]
  forfait       forfait[]
 
}



model paiement {
  id                                     Int       @id @default(autoincrement())
  idContrat                              Int?
  incrementType                          String?   @db.VarChar(255)
  incrementValue                         Int?
  date_creation                          DateTime? @default(now()) @db.Timestamp(0)
  contrat                                contrat?  @relation(fields: [idContrat], references: [idContrat], onDelete: NoAction, onUpdate: NoAction, map: "FK_Paiement_ContractIncrementHistory")

  @@index([idContrat], map: "FK_Paiement_ContractIncrementHistory")
}

model permi {
  idPermi  Int       @id @default(autoincrement())
  type     String?   @db.VarChar(254)
 contrat  contrat[]

}

model service {
  idService    Int            @id @default(autoincrement())
  nom          String?        @db.VarChar(254)
  tarification tarification[]
}

model tarification {
  idService   Int
  idUser      Int
  tarif       Decimal?
  service     service      @relation(fields: [idService], references: [idService], onDelete: NoAction, onUpdate: NoAction, map: "FK_TARIFICATION_SERVICE")
  user        user         @relation(fields: [idUser], references: [idUser], onDelete: NoAction, onUpdate: NoAction, map: "FK_TARIFICATION_USER")

  @@id([idService, idUser])
 
  @@index([idUser], map: "FK_TARIFICATION_USER")
}

model voitures {
  id            Int          @id @default(autoincrement())
  marque        String?      @db.VarChar(255)
  modele        String?      @db.VarChar(255)
  annee         Int?
  couleur       String?      @db.VarChar(100)
  idAutoEcole   Int?
  statut        String?      @db.VarChar(255)
  date_creation DateTime?    @default(now()) @db.Timestamp(0)
  image         String?      @db.VarChar(255)
  description   String?      @db.Text
  matricule     String?      @db.VarChar(255)
  autoecole     autoecole?   @relation(fields: [idAutoEcole], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "FK_VOITURE_UTILISER_AUTOECOL")
  calendrier    calendrier[]

  @@index([idAutoEcole], map: "fk_idAutoEcole_cars")

}
